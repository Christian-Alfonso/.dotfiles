// Place your key bindings in this file to override the defaults
[
    {
        "key": "ctrl+m",
        "command": "-editor.action.toggleTabFocusMode"
    },
    // Skip having to tab over every options in the search
    // input box by jumping to the search list
    {
        "key": "enter",
        "command": "search.action.focusSearchList",
        "when": "!editorTextFocus && inputBoxFocus && (hasSearchResult || inSearchEditor)"
    },
    // Navigate tabs using the same navigation keys as Vim
    {
        "key": "ctrl+h",
        "command": "workbench.action.previousEditor"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.openEditorAtIndex1"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.nextEditor"
    },
    // Hack scroll up/down behavior to focus window on cursor afterwards
    {
        "key": "ctrl+u",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.u && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "vscode-neovim.ctrl-u",
                {
                    "command": "vscode-neovim.send",
                    "args": "M"
                }
            ]
        }
    },
    {
        "key": "ctrl+u",
        "command": "-vscode-neovim.ctrl-u",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.u && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+d",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.u && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "vscode-neovim.ctrl-d",
                {
                    "command": "vscode-neovim.send",
                    "args": "M"
                }
            ]
        }
    },
    {
        "key": "ctrl+d",
        "command": "-vscode-neovim.ctrl-d",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.d && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+b",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.b && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "vscode-neovim.ctrl-b",
                {
                    "command": "vscode-neovim.send",
                    "args": "M"
                }
            ]
        }
    },
    {
        "key": "ctrl+b",
        "command": "-vscode-neovim.ctrl-b",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.b && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+f",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "vscode-neovim.ctrl-f",
                {
                    "command": "vscode-neovim.send",
                    "args": "M"
                }
            ]
        }
    },
    {
        "key": "ctrl+f",
        "command": "-vscode-neovim.ctrl-f",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.f && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    // Exit visual/selection mode for entries in jumplist when navigating
    // with <C-i>/<C-o>, as that behavior does not match normal Neovim,
    // and prevents navigating forth/back repeatedly by mashing buttons
    {
        "key": "ctrl+i",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.i && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "workbench.action.navigateForward",
                "cancelSelection"
            ]
        }
    },
    {
        "key": "ctrl+i",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.i && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+o",
        "command": "runCommands",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.o && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'",
        "args": {
            "commands": [
                "workbench.action.navigateBack",
                "cancelSelection"
            ]
        }
    },
    {
        "key": "ctrl+o",
        "command": "-vscode-neovim.send",
        "when": "editorTextFocus && neovim.ctrlKeysNormal.o && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    // Default list select from search puts the editor
    // into Visual mode, which is not normal Neovim
    // behavior when using an equivalent like Telescope
    {
        "key": "enter",
        "command": "runCommands",
        "when": "listFocus && !inputFocus && !notebookCellListFocused",
        "args": {
            "commands": [
                "list.select",
                "vscode-neovim.escape"
            ]
        }
    },
    {
        "key": "enter",
        "command": "-list.select",
        "when": "listFocus && !inputFocus && !notebookCellListFocused"
    },
    // Use "Ctrl+<Arrow>" for window navigation, since <C-w><Arrow> takes longer
    // and feels a bit inconsistent in VSCode
    {
        "key": "ctrl+up",
        "command": "workbench.action.navigateUp",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+down",
        "command": "workbench.action.navigateDown",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+left",
        "command": "workbench.action.navigateLeft",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "ctrl+right",
        "command": "workbench.action.navigateRight",
        "when": "neovim.mode == 'normal'"
    },
    // Rebind collapse list from "Ctrl+LeftArrow" since it conflicts with
    // the window navigation rebinds
    {
        "key": "ctrl+shift+left",
        "command": "list.collapseAll",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+left",
        "command": "-list.collapseAll",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    {
        "key": "ctrl+shift+right",
        "command": "list.toggleExpand",
        "when": "listFocus && !inputFocus && !treestickyScrollFocused"
    },
    // Rebind Ctrl+n and Ctrl+p to go to next/previous problems
    // in current file, respectively. These binds still work as
    // the default behavior in empty editor groups or the "Welcome" page
    {
        "key": "ctrl+n",
        "command": "editor.action.marker.next",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    {
        "key": "ctrl+p",
        "command": "editor.action.marker.prev",
        "when": "editorTextFocus && neovim.init && neovim.mode != 'insert' && editorLangId not in 'neovim.editorLangIdExclusions'"
    },
    // Rebind Enter and Shift+Enter when using VSCode's find so that
    // they act like pressing "n" or "N" in Neovim, which has a similar
    // sequence of bindings in the Neovim configuration
    {
        "key": "enter",
        "command": "runCommands",
        "when": "editorFocus && findInputFocussed",
        "args": {
            "commands": [
                "editor.action.nextMatchFindAction",
                "closeFindWidget",
                {
                    "command": "vscode-neovim.send",
                    "args": "zz"
                },
                "vscode-neovim.escape",
                "cancelSelection"
            ]
        }
    },
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "shift+enter",
        "command": "runCommands",
        "when": "editorFocus && findInputFocussed",
        "args": {
            "commands": [
                "editor.action.previousMatchFindAction",
                "cursorWordLeft",
                "closeFindWidget",
                {
                    "command": "vscode-neovim.send",
                    "args": "zz"
                },
                "vscode-neovim.escape",
                "cancelSelection"
            ]
        }
    },
    {
        "key": "shift+enter",
        "command": "-editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+/",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalHasBeenCreated || terminalFindFocused && terminalProcessSupported || terminalFocusInAny && terminalHasBeenCreated || terminalFocusInAny && terminalProcessSupported"
    },
    // Unbind Ctrl+Shift+c, as it will conflict with any console-based applications
    // like Neovim that may want to use these shortcuts. Use Tmux's copy mode instead
    // to copy any text from the terminal, or VSCode Neovim's visual mode to copy from output
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.openNativeConsole",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalTextSelectedInFocused || terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected || terminalFocus && terminalTextSelected && terminalTextSelectedInFocused || terminalHasBeenCreated && terminalTextSelected && terminalTextSelectedInFocused || terminalProcessSupported && terminalTextSelected && terminalTextSelectedInFocused"
    },
    // Bind seems to be broken, even when not focused on text editor. It maps to normal
    // Neovim bindings, so explicitly rebind it when editor is not focused
    {
        "key": "ctrl+k ctrl+o",
        "command": "workbench.action.files.openFolder",
        "when": "!editorFocus && openFolderWorkspaceSupport"
    },
    // Use "Shift+<Arrow>" for window resizing, since <C-w><Plus/Minus/Angle Bracket>
    // takes much longer to easily repeat in VSCode
    {
        "key": "shift+up",
        "command": "workbench.action.increaseViewHeight",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "shift+down",
        "command": "workbench.action.decreaseViewHeight",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "shift+right",
        "command": "workbench.action.increaseViewWidth",
        "when": "neovim.mode == 'normal'"
    },
    {
        "key": "shift+left",
        "command": "workbench.action.decreaseViewWidth",
        "when": "neovim.mode == 'normal'"
    },
    // Use "Ctrl+Shift+r" to quickly restart the Neovim extension when it hangs
    {
        "key": "ctrl+shift+r",
        "command": "vscode-neovim.restart",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+shift+r",
        "command": "-editor.action.refactor",
        "when": "editorHasCodeActionsProvider && textInputFocus && !editorReadonly"
    }
]